# CentOS 8 Kickstart
# Basic server config for Ansible staging

# Locales
lang en_US.UTF-8
keyboard --vckeymap=us --xlayouts='us'
timezone Europe/Amsterdam --isUtc --nontp

# Partitioning
ignoredisk --only-use=sda
clearpart --none --initlabel
autopart --type=lvm

# Bootloader
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda

# Various options
eula --agreed
# cmdline < use for fully non-interactive install
# text < use for interactive text-based install
# graphical < use for GUI installer
text
cdrom
skipx
selinux --enforcing
firstboot --disable
services --enabled=NetworkManager,sshd
reboot

# Network
network  --bootproto=dhcp --device=eth0 --ipv6=auto --activate
network  --hostname=cos8-hvv-prestage
firewall --enabled --ssh

# Authentication
rootpw --iscrypted $6$xs4$WddwyzEWZqlta0Tk7H7OYDasdfEHD8sqdLSXtv2DYeQmSKNldsyvGfgNt3NFJeuds897d448gIQQ3BJELq41
auth --enableshadow --passalgo=sha512 --kickstart
user --name=ansible --plaintext --password ansible --groups=ansible,wheel

# Repos
repo --name="AppStream" --baseurl=file:///run/install/repo/AppStream

%packages --ignoremissing --excludedocs
@^server-product-environment
kexec-tools
nano
vim
wget
curl

# Whole bunch of firmware we don't need
-iwl*
-libertas-*
-ql2*
-ipw2*
-aic94xx-firmware
-atmel-firmware
-b43-openfwwf
-ivtv-firmware
-bfa-firmware
-rt73usb-firmware
-rt61pci-firmware
-zd1211-firmware
-xorg-x11-drv-ati-firmware
-iprutils
-fprintd-pam
-intltool
-alsa-firmware
%end

%addon com_redhat_kdump --disable
%end


# Postinstallation tasks
# I'm copying the files by catting them, but you can copy them using a different technique if required, or even curl them
%post --nochroot

# Copy private key for Git repo - you can also do this in the firstboot script
cat >> /mnt/sysimage/root/.ssh/id_rsa << \EOF
# Private key goes here
EOF


# Script that calls for provisioning from git
cat >> /mnt/sysimage/root/firstboot.sh << \EOF
#!/bin/bash

# Set GIT to your own git.
GIT="git@github.com:shippingport/ansible.git"
# Packages to install prior to running ansible-pull. Git and Ansible are required.
PACKAGES=("git" "ansible")
# Set MD5 to the RSA key fingerprint shared on GitHub's website:
# https://help.github.com/en/github/authenticating-to-github/testing-your-ssh-connection
# This way we can verify the key when adding SSH hosts later on.
MD5="16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48"

# Private key to your git repo
cat > /root/.ssh/id_rsa <<EOF
# Your private key here
EOF

# Add GitHub to known_hosts
# Import the keys to a temp file
ssh-keyscan -t rsa -H github.com >> /tmp/github_ssh
KEY=$(ssh-keygen -l -E md5 -f /tmp/github_ssh | awk '{print $2}' | cut -d":" -f 2- | awk '{print $1}')
if diff <(echo "$KEY") <(echo "$MD5"); then
    # Imported key matches with known-good key, so add the keys to known_hosts
    printf "SSH keys match!"
    cat /tmp/github_ssh >> /root/.ssh/known_hosts
    chmod 0600 /root/.ssh/id_rsa /root/.ssh/known_hosts
else
    # Imported key did not match, give user 30 seconds to import the keys anyway
    # This section is optional
    read -t 30 -p "SSH keys did not match. Import anyway? (NOT RECOMMENDED) [y/N]" -n 1 -r
    if [[ $REPLY =~ ^(y|Y)$ ]]; then
    # Import the key
        printf "\nAdding key anyway..."
        cat /tmp/github_ssh >> /root/.ssh/known_hosts
        chmod 0600 /root/.ssh/id_rsa /root/.ssh/known_hosts
        printf " Key added.\n"
    else
    # Exit script
    # Maybe do some rescue work here...
    printf "\nERROR: key mismatch! Aborting..."
    rm /root/.ssh/id_rsa
    printf "\nDeployment failed.\n"
    fi
    # Check if required packages are installed, and if not, install them
    for _package in "${PACKAGES[@]}"; do
        if ! rpm -q "$_package"; then
            yum install "$_package" -y
        fi
    done
    # Run Ansible!
    ansible-pull firstboot.yml -C master -U $GIT -f -i localhost, --full --purge
fi

# Disable the service and delete the script
systemctl disable provisioning.service
rm $0
EOF

# Jazz it up with a runonce service
cat >> /mnt/sysimage/etc/systemd/system/provisioning.service << \EOF
[Unit]
Description=Run firstboot script to start provisioning
After=getty.target

[Service]
Type=simple
RemainAfterExit=no
ExecStart=/root/firstboot.sh
TimeoutStartSec=0

[Install]
WantedBy=default.target
EOF

# Enable the runonce service
systemctl enable provisioning.service
chmod u+x /mnt/sysimage/root/firstboot.sh

# Let yum do its thing
yum install epel-release -y
yum update -y
yum clean all

# Add SSH key for Ansible user
sshkey --username=ansible "your key here"


# Add ansible user to sudoers file
echo "ansible ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/ansible

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end
